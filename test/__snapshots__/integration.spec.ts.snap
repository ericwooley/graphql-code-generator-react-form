// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`React Apollo Forms should generate a Form 1`] = `
"
    /**************************
     * utilities
     *************************/
    let idNonce = 0;
    const uniqueId = (inStr: string) => inStr+(idNonce++)
    

    
      interface StandardProps {
        children?: React.ReactNode
        path: string
        id?: string
        className?: string
        name: string
        scalar: string
      }
      interface FormPrimeInput extends React.FC<{onChange: (value: number|string) => number|string, value?: number|string, label: string} & StandardProps> {}
      interface GQLFormStandardComponent<T = {}> extends React.FC<StandardProps & T> { }
      export interface GQLReactFormContext {
        form: GQLFormStandardComponent< {onSubmit: (e?: {preventDefault?: () => any}) => any} >,
        div: GQLFormStandardComponent,
        label: GQLFormStandardComponent,
        labelTextWrapper: GQLFormStandardComponent,
        button: GQLFormStandardComponent<{onClick?: (e?: {preventDefault?: () => any}) => any }>,
        listWrapper: GQLFormStandardComponent,
        listItem: GQLFormStandardComponent,
        submitButton: React.FC<{text: string}>
        input: FormPrimeInput,
        UserInput?: React.FC<UserInputFormInputPropTypes> 
      }
      export const defaultReactFormContext: GQLReactFormContext = {
        form: 'form' as any,
        div: ({...props}: StandardProps) => <div {...props} />,
        label: ({...props}: StandardProps) => <label {...props} />,
        labelTextWrapper: ({...props}: StandardProps) => <h4 {...props} />,
        button: ({...props}: StandardProps & {onClick?: (e?: {preventDefault: () => any}) => any}) => <button {...props} onClick={e => {e.preventDefault(); props.onClick?.()}}/>,
        listWrapper: ({...props}: StandardProps) => <ol {...props} />,
        listItem: ({...props}: StandardProps) => <li {...props} />,
        submitButton: ((props: {text: string}) => <input type=\\"submit\\" {...props} value={props.text} /> ),
        input: ((props) => {
          const {path, scalar, name} = props
          const ctx = React.useContext(GQLReactFormContext)
          const DivComponent = ctx.div || defaultReactFormContext.div
          const typeofValue = typeof props.value
            return (
            <DivComponent  path={path} scalar={scalar} name={name}>
          
            <label>
              <strong>{props.label}</strong><br />
              <input value={props.value} type={props.value === undefined
                ? \\"string\\"
                : typeofValue === 'string'
                ? 'text'
                : typeofValue === 'number'
                ? 'number'
                : ''
              } onChange={(e) =>
                props.onChange(e.target.value)} />
            </label>
            
          </DivComponent>)

          }),

      }
      export const GQLReactFormContext = React.createContext<Partial<GQLReactFormContext>>(defaultReactFormContext)

    
/**********************
 * Default Values
 * *******************/
  export const defaultUserInputScalar = {

          get id (): Scalars[\\"Int\\"]|undefined {
            
          return JSON.parse(JSON.stringify(0))
        
          },
    

          get name (): Scalars[\\"String\\"] {
            
          return JSON.parse(JSON.stringify(\\"\\"))
        
          },
    

          get email (): Scalars[\\"String\\"] {
            
          return JSON.parse(JSON.stringify(\\"\\"))
        
          },
    

          get password (): Scalars[\\"String\\"]|undefined {
            
          return JSON.parse(JSON.stringify(\\"\\"))
        
          },
    

          get mother (): UserInput|undefined {
            return undefined
          },
    

          get father (): UserInput|undefined {
            return undefined
          },
    

          get friends (): UserInput[] {
            
          return JSON.parse(JSON.stringify([]))
        
          },
    

          get followers (): UserInput[]|undefined {
            return undefined
          },
    
}
/**********************
 * Scalar Form Fragments
 * *******************/
  
    export interface IntFormInputPropTypes {
      optional: boolean,
      label: string,
      value?: Maybe<Scalars[\\"Int\\"]>,
      scalarName: string,
      name: string,
      parentPath: string,
      onChange: (value?: Scalars[\\"Int\\"]) => any
    }
        export const IntFormInput = React.memo((props: IntFormInputPropTypes) => {
          const {parentPath, label, name, value, onChange } = props
const scalar = \\"Int\\"
const path = [parentPath, name].join('.')
const ctx = React.useContext(GQLReactFormContext)
const DivComponent = ctx.div || defaultReactFormContext.div
const ButtonComponent = ctx.button || defaultReactFormContext.button
const LabelTextWrapperComponent = ctx.labelTextWrapper || defaultReactFormContext.labelTextWrapper
const InputComponent = ctx.input || defaultReactFormContext.input
          return (
        <InputComponent onChange={props.onChange as any} value={value === undefined || value===null? \\"\\" : value} label={label} path={path} scalar={scalar} name={name}>
          
          </InputComponent>)
        })
    


    export interface StringFormInputPropTypes {
      optional: boolean,
      label: string,
      value?: Maybe<Scalars[\\"String\\"]>,
      scalarName: string,
      name: string,
      parentPath: string,
      onChange: (value?: Scalars[\\"String\\"]) => any
    }
        export const StringFormInput = React.memo((props: StringFormInputPropTypes) => {
          const {parentPath, label, name, value, onChange } = props
const scalar = \\"String\\"
const path = [parentPath, name].join('.')
const ctx = React.useContext(GQLReactFormContext)
const DivComponent = ctx.div || defaultReactFormContext.div
const ButtonComponent = ctx.button || defaultReactFormContext.button
const LabelTextWrapperComponent = ctx.labelTextWrapper || defaultReactFormContext.labelTextWrapper
const InputComponent = ctx.input || defaultReactFormContext.input
          return (
        <InputComponent onChange={props.onChange as any} value={value === undefined || value===null? \\"\\" : value} label={label} path={path} scalar={scalar} name={name}>
          
          </InputComponent>)
        })
    


    export interface UserInputFormInputPropTypes {
      optional: boolean,
      label: string,
      value?: Maybe<UserInput>,
      scalarName: string,
      name: string,
      parentPath: string,
      onChange: (value?: UserInput) => any
    }
        export const UserInputFormInput = React.memo((props: UserInputFormInputPropTypes) => {
          const {parentPath, label, name, value, onChange } = props
const scalar = \\"UserInput\\"
const path = [parentPath, name].join('.')
const ctx = React.useContext(GQLReactFormContext)
const DivComponent = ctx.div || defaultReactFormContext.div
const ButtonComponent = ctx.button || defaultReactFormContext.button
const LabelTextWrapperComponent = ctx.labelTextWrapper || defaultReactFormContext.labelTextWrapper
          
      if(value === undefined || value === null ){
        return <DivComponent  path={path} scalar={scalar} name={name}>
          <ButtonComponent onClick={() => onChange(JSON.parse(JSON.stringify(defaultUserInputScalar)))
          } path={path} scalar={scalar} name={name}>
          Add {label}
          </ButtonComponent>
          </DivComponent>
      }
return <DivComponent className={\\"mutationFormNested\\"} path={path} scalar={scalar} name={name}>
          
            <LabelTextWrapperComponent  path={path} scalar={scalar} name={name}>
          {label}
          </LabelTextWrapperComponent>
            <UserInputFormInput value={value?.users === null? undefined : value?.users} scalarName={\\"UserInput\\"} name={\\"users\\"} optional={true} label={\\"Users\\"} parentPath={path} onChange={(newValue = JSON.parse(JSON.stringify(defaultUserInputScalar))) => onChange({...value, ['users']: newValue})} />
        
          </DivComponent>
        })
    


    export interface UserInputFormInputAsListPropTypes {
      optional: boolean,
      label: string,
      value?: Maybe<UserInput>[],
      scalarName: string,
      name: string,
      parentPath: string,
      onChange: (value?: UserInput[]) => any
    }
        export const UserInputFormInputAsList = React.memo((props: UserInputFormInputAsListPropTypes) => {
          const {parentPath, label, name, value, onChange } = props
const scalar = \\"UserInput\\"
const path = [parentPath, name].join('.')
const ctx = React.useContext(GQLReactFormContext)
const DivComponent = ctx.div || defaultReactFormContext.div
const ButtonComponent = ctx.button || defaultReactFormContext.button
const LabelTextWrapperComponent = ctx.labelTextWrapper || defaultReactFormContext.labelTextWrapper
const ListItemComponent = ctx.listItem || defaultReactFormContext.listItem
const valueMapRef = React.useRef<
          {id: string, value: Maybe<UserInput>}[]
        >((value||[]).map(v => ({id: uniqueId(\\"users\\"), value: v})))
const addItem=() => {
          valueMapRef.current = [...valueMapRef.current, {id: uniqueId('users'), value: JSON.parse(JSON.stringify(defaultUserInputScalar))} ];
          onChange(valueMapRef.current.map(i => i.value === null ? JSON.parse(JSON.stringify(defaultUserInputScalar)): i.value))
        }
const insertItem=(index: number) =>  {
            valueMapRef.current = [
              ...valueMapRef.current.slice(0, index),
              {id: uniqueId('users'), value: JSON.parse(JSON.stringify(defaultUserInputScalar))},
              ...valueMapRef.current.slice(index) ];
            onChange(valueMapRef.current.map(i => i.value === null ? JSON.parse(JSON.stringify(defaultUserInputScalar)): i.value))
        }
const removeItem=(index: number) => {
          valueMapRef.current = [...valueMapRef.current.slice(0, index), ...valueMapRef.current.slice(index+1) ]
          onChange(valueMapRef.current.map(i => i.value === null ? JSON.parse(JSON.stringify(defaultUserInputScalar)): i.value))
        }
const ListWrapperComponent = ctx.listWrapper || defaultReactFormContext.listWrapper
          return (
    <DivComponent className={\\"mutationFormNested mutationFormList\\"} path={path} scalar={scalar} name={name}>
          
    {label && <LabelTextWrapperComponent  path={path} scalar={scalar} name={name}>
          {label}
          </LabelTextWrapperComponent>}
    <ListWrapperComponent  path={path} scalar={scalar} name={name}>
          
        {valueMapRef.current.length > 0 ? (
          valueMapRef.current.map((item, index) => (
            <ListItemComponent key={item.id} path={path} scalar={scalar} name={name}>
          <ButtonComponent onClick={() => removeItem(index)} path={path} scalar={scalar} name={name}>
          X
          </ButtonComponent>

            <ButtonComponent onClick={() => insertItem(index)} path={path} scalar={scalar} name={name}>
          +
          </ButtonComponent>
            <UserInputFormInput optional={false} label={\\"\\"} value={item.value} scalarName={\\"UserInput\\"} name={String(index)} parentPath={path} onChange={(newValue = JSON.parse(JSON.stringify(defaultUserInputScalar))) => {
                    valueMapRef.current = valueMapRef.current.map(i => i.id === item.id ? {id: item.id, value: newValue} : i)
                    onChange(valueMapRef.current.map(i => i.value === null ?JSON.parse(JSON.stringify(defaultUserInputScalar)) : i.value))
                }} />
          </ListItemComponent>
          ))
        ) : (
          <ButtonComponent onClick={addItem} path={path} scalar={scalar} name={name}>
          +
          </ButtonComponent>
        )}
          </ListWrapperComponent>
      
          </DivComponent>
    )
        })
    
/***************************
* forms Forms
* *************************/
  

  export const addUsersDefaultValues = {
  users: []
  };


  export interface AddUsersFormVariables {
  users: UserInput[]
  }



  export const AddUsersForm = (
  {
    initialValues = addUsersDefaultValues,
    onSubmit,
    ...formProps} : React.DetailedHTMLProps<
  React.FormHTMLAttributes<HTMLFormElement>,
  HTMLFormElement
  > & { initialValues?: Partial<AddUsersFormVariables>, onSubmit: (values: AddUsersFormVariables)=> any}) => {
  const [value, setValue]= React.useState(initialValues || {})
  const ctx = React.useContext(GQLReactFormContext)
  const FormComponent = ctx.form || defaultReactFormContext.form
  const SubmitButtonComponent = ctx.submitButton || defaultReactFormContext.submitButton
  return (
      <FormComponent scalar=\\"\\" name=\\"\\" onSubmit={(e) => {
        e?.preventDefault?.()
        onSubmit(value as any)
      }} {...formProps} path=\\"\\">
        <UserInputFormInputAsList value={value?.users} label={\\"Users\\"} parentPath={\\"root\\"} onChange={(value) => {
                console.log('onChange users', value)
                setValue(oldVal => ({...oldVal, ['users']: value}))
              }} scalarName={\\"UserInput\\"} name={\\"users\\"} optional={false} />
        <SubmitButtonComponent text=\\"submit\\" />
      </FormComponent>
  )
  };
    
/***************************
 * MetaData Export
 * *************************/
  
  export const mutationsMetaData = [
  {
    \\"name\\": \\"addUsers\\",
    \\"variables\\": [
      {
        \\"accessChain\\": [],
        \\"endedFromCycle\\": false,
        \\"scalarName\\": \\"UserInput\\",
        \\"name\\": \\"users\\",
        \\"tsType\\": \\"UserInput\\",
        \\"optional\\": false,
        \\"asList\\": true,
        \\"children\\": [
          {
            \\"accessChain\\": [
              \\"UserInput\\"
            ],
            \\"endedFromCycle\\": false,
            \\"scalarName\\": \\"UserInput\\",
            \\"name\\": \\"users\\",
            \\"tsType\\": \\"UserInput\\",
            \\"optional\\": true,
            \\"asList\\": false,
            \\"children\\": [
              {
                \\"accessChain\\": [
                  \\"UserInput\\",
                  \\"Int\\"
                ],
                \\"endedFromCycle\\": false,
                \\"scalarName\\": \\"Int\\",
                \\"name\\": \\"id\\",
                \\"tsType\\": \\"Scalars[\\\\\\"Int\\\\\\"]\\",
                \\"optional\\": true,
                \\"asList\\": false,
                \\"children\\": null
              },
              {
                \\"accessChain\\": [
                  \\"UserInput\\",
                  \\"String\\"
                ],
                \\"endedFromCycle\\": false,
                \\"scalarName\\": \\"String\\",
                \\"name\\": \\"name\\",
                \\"tsType\\": \\"Scalars[\\\\\\"String\\\\\\"]\\",
                \\"optional\\": false,
                \\"asList\\": false,
                \\"children\\": null
              },
              {
                \\"accessChain\\": [
                  \\"UserInput\\",
                  \\"String\\"
                ],
                \\"endedFromCycle\\": false,
                \\"scalarName\\": \\"String\\",
                \\"name\\": \\"email\\",
                \\"tsType\\": \\"Scalars[\\\\\\"String\\\\\\"]\\",
                \\"optional\\": false,
                \\"asList\\": false,
                \\"children\\": null
              },
              {
                \\"accessChain\\": [
                  \\"UserInput\\",
                  \\"String\\"
                ],
                \\"endedFromCycle\\": false,
                \\"scalarName\\": \\"String\\",
                \\"name\\": \\"password\\",
                \\"tsType\\": \\"Scalars[\\\\\\"String\\\\\\"]\\",
                \\"optional\\": true,
                \\"asList\\": false,
                \\"children\\": null
              },
              {
                \\"accessChain\\": [
                  \\"UserInput\\",
                  \\"UserInput\\"
                ],
                \\"endedFromCycle\\": true,
                \\"scalarName\\": \\"UserInput\\",
                \\"name\\": \\"mother\\",
                \\"tsType\\": \\"UserInput\\",
                \\"optional\\": true,
                \\"asList\\": false,
                \\"children\\": null
              },
              {
                \\"accessChain\\": [
                  \\"UserInput\\",
                  \\"UserInput\\"
                ],
                \\"endedFromCycle\\": true,
                \\"scalarName\\": \\"UserInput\\",
                \\"name\\": \\"father\\",
                \\"tsType\\": \\"UserInput\\",
                \\"optional\\": true,
                \\"asList\\": false,
                \\"children\\": null
              },
              {
                \\"accessChain\\": [
                  \\"UserInput\\",
                  \\"UserInput\\"
                ],
                \\"endedFromCycle\\": true,
                \\"scalarName\\": \\"UserInput\\",
                \\"name\\": \\"friends\\",
                \\"tsType\\": \\"UserInput\\",
                \\"optional\\": false,
                \\"asList\\": true,
                \\"children\\": null
              },
              {
                \\"accessChain\\": [
                  \\"UserInput\\",
                  \\"UserInput\\"
                ],
                \\"endedFromCycle\\": true,
                \\"scalarName\\": \\"UserInput\\",
                \\"name\\": \\"followers\\",
                \\"tsType\\": \\"UserInput\\",
                \\"optional\\": true,
                \\"asList\\": true,
                \\"children\\": null
              }
            ]
          }
        ]
      }
    ]
  }
]
  
  "
`;

exports[`React Apollo Imports should import React and forms dependencies 1`] = `
Array [
  "import * as React from 'react';",
]
`;

exports[`React Apollo Imports should import React and forms dependencies 2`] = `
"
    /**************************
     * utilities
     *************************/
    let idNonce = 0;
    const uniqueId = (inStr: string) => inStr+(idNonce++)
    

    
      interface StandardProps {
        children?: React.ReactNode
        path: string
        id?: string
        className?: string
        name: string
        scalar: string
      }
      interface FormPrimeInput extends React.FC<{onChange: (value: number|string) => number|string, value?: number|string, label: string} & StandardProps> {}
      interface GQLFormStandardComponent<T = {}> extends React.FC<StandardProps & T> { }
      export interface GQLReactFormContext {
        form: GQLFormStandardComponent< {onSubmit: (e?: {preventDefault?: () => any}) => any} >,
        div: GQLFormStandardComponent,
        label: GQLFormStandardComponent,
        labelTextWrapper: GQLFormStandardComponent,
        button: GQLFormStandardComponent<{onClick?: (e?: {preventDefault?: () => any}) => any }>,
        listWrapper: GQLFormStandardComponent,
        listItem: GQLFormStandardComponent,
        submitButton: React.FC<{text: string}>
        input: FormPrimeInput,
        
      }
      export const defaultReactFormContext: GQLReactFormContext = {
        form: 'form' as any,
        div: ({...props}: StandardProps) => <div {...props} />,
        label: ({...props}: StandardProps) => <label {...props} />,
        labelTextWrapper: ({...props}: StandardProps) => <h4 {...props} />,
        button: ({...props}: StandardProps & {onClick?: (e?: {preventDefault: () => any}) => any}) => <button {...props} onClick={e => {e.preventDefault(); props.onClick?.()}}/>,
        listWrapper: ({...props}: StandardProps) => <ol {...props} />,
        listItem: ({...props}: StandardProps) => <li {...props} />,
        submitButton: ((props: {text: string}) => <input type=\\"submit\\" {...props} value={props.text} /> ),
        input: ((props) => {
          const {path, scalar, name} = props
          const ctx = React.useContext(GQLReactFormContext)
          const DivComponent = ctx.div || defaultReactFormContext.div
          const typeofValue = typeof props.value
            return (
            <DivComponent  path={path} scalar={scalar} name={name}>
          
            <label>
              <strong>{props.label}</strong><br />
              <input value={props.value} type={props.value === undefined
                ? \\"string\\"
                : typeofValue === 'string'
                ? 'text'
                : typeofValue === 'number'
                ? 'number'
                : ''
              } onChange={(e) =>
                props.onChange(e.target.value)} />
            </label>
            
          </DivComponent>)

          }),

      }
      export const GQLReactFormContext = React.createContext<Partial<GQLReactFormContext>>(defaultReactFormContext)

    
/**********************
 * Default Values
 * *******************/
  
/**********************
 * Scalar Form Fragments
 * *******************/
  
/***************************
* forms Forms
* *************************/
  
/***************************
 * MetaData Export
 * *************************/
  
  export const mutationsMetaData = []
  
  "
`;

exports[`React Apollo Imports should import React and forms dependencies 3`] = `undefined`;
